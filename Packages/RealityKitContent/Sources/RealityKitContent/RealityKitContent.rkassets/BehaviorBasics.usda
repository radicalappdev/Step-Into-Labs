#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Demo_1", "Subject_1_Move", "Subject_1_Loop", "Subject_2_Move", "Subject_2_Loop", "Subject_2_Collision_Wall_2", "Subject_2_Collision_Wall_1"]
    def Xform "Demo_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0.68838894, 0)
        }
    )
    {
        quatf xformOp:orient = (0.9413476, 0, 0.3374385, 0)
        float3 xformOp:translate = (-1.7933241, 1, -1.9643464)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Subject_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Demo_1/Subject_1/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Demo_1/Subject_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.83137256, 0.73333335, 0.73333335) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/Demo_1/Subject_1/OnAddedToScene>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnAddedToScene"
            {
                rel actions = </Root/Demo_1/Subject_1/OnAddedToScene/Action>
                uniform bool exclusive
                rel triggers = </Root/Demo_1/Subject_1/OnAddedToScene/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Demo_1/Subject_1>
                    token info:id = "SceneTransition"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Subject_1_Loop>
                    rel animationLibraryKeyOverrideKey = </Root/Demo_1/Subject_1/OnAddedToScene/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }
        }
    }

    def "StepDome" (
        active = true
        references = @BuildingBlocks/StepDome.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RealityKitTimeline "Subject_1_Move"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 1
                uniform token info:id = "8660E368-B85A-4C37-B9CA-3A4E15E8855F"
                float3 position = (0, 0, 0)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (1, 1, 1)
                double startTime = 0
                rel target = </Root/Demo_1/Subject_1>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_To2"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 1
                uniform token info:id = "8660E368-B85A-4C37-B9CA-3A4E15E8855F"
                float3 position = (0, 0, 0)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (1, 1, 1)
                double startTime = 1.0000000001
                rel target = </Root/Demo_1/Subject_1>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Subject_1_Loop"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 2.0000000001
                uniform token info:id = "B95B3846-EADD-41A6-BFB6-F8FD76837464"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Subject_1_Move>
            }
        }
    }

    def Xform "Demo_2" (
        active = true
    )
    {
        reorder nameChildren = ["Wall_1", "Subject_2"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.5, 1, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Subject_2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Demo_2/Subject_2/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.06314182, 0.0041263103, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Demo_2/Subject_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.83137256, 0.73333335, 0.73333335) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = [
                    </Root/Demo_2/Subject_2/OnAddedToScene>,
                    </Root/Demo_2/Subject_2/OnCollision>,
                    </Root/Demo_2/Subject_2/OnCollision2>,
                ]
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnAddedToScene"
            {
                rel actions = </Root/Demo_2/Subject_2/OnAddedToScene/Action>
                uniform bool exclusive
                rel triggers = </Root/Demo_2/Subject_2/OnAddedToScene/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Demo_2/Subject_2>
                    token info:id = "SceneTransition"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Subject_2_Loop>
                    rel animationLibraryKeyOverrideKey = </Root/Demo_2/Subject_2/OnAddedToScene/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnCollision"
            {
                rel actions = </Root/Demo_2/Subject_2/OnCollision/Action>
                uniform bool exclusive
                rel triggers = </Root/Demo_2/Subject_2/OnCollision/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Demo_2/Subject_2>
                    rel colliders = </Root/Demo_2/Wall_2>
                    token info:id = "Collide"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Subject_2_Collision_Wall_2>
                    rel animationLibraryKeyOverrideKey = </Root/Demo_2/Subject_2/OnCollision/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def Preliminary_Behavior "OnCollision2"
            {
                rel actions = </Root/Demo_2/Subject_2/OnCollision2/Action>
                uniform bool exclusive
                rel triggers = </Root/Demo_2/Subject_2/OnCollision2/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Demo_2/Subject_2>
                    rel colliders = </Root/Demo_2/Wall_1>
                    token info:id = "Collide"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Subject_2_Collision_Wall_1>
                    rel animationLibraryKeyOverrideKey = </Root/Demo_2/Subject_2/OnCollision2/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }
        }

        def Cube "Wall_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Demo_2/Wall_1/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.4, 1.1, 1.1)
            float3 xformOp:translate = (-0.1, 0.0000042915344, 0.0000021457672)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Demo_2/Wall_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.41960785, 0.003921569, 0.17254902) (
                        colorSpace = "srgb_texture"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }
        }

        def Cube "Wall_2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Demo_2/Wall_2/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.4, 1.1, 1.1)
            float3 xformOp:translate = (1.1, 0.0000042915344, 0.0000021457672)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Demo_2/Wall_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.41960785, 0.003921569, 0.17254902) (
                        colorSpace = "srgb_texture"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }
        }
    }

    def RealityKitTimeline "Subject_2_Move"
    {
        reorder nameChildren = ["Track", "Track2"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 1
                uniform token info:id = "8660E368-B85A-4C37-B9CA-3A4E15E8855F"
                float3 position = (1, 0, 0)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (1, 1, 1)
                double startTime = 0
                rel target = </Root/Demo_2/Subject_2>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_To2"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 1
                uniform token info:id = "8660E368-B85A-4C37-B9CA-3A4E15E8855F"
                float3 position = (0, 0, 0)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (1, 1, 1)
                double startTime = 1.0000000001
                rel target = </Root/Demo_2/Subject_2>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Subject_2_Loop"
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 2.0000000001
                uniform token info:id = "C4DF889A-4EED-47AD-9F69-10F18AFCD02B"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Subject_2_Move>
            }
        }
    }

    def RealityKitTimeline "Subject_2_Collision_Wall_2"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 0.5
                uniform token info:id = "02F83335-06A8-4A0E-B52A-B0384C9C32AA"
                float revolutions = 0.5
                token spinDirection = "counterclockwise"
                double startTime = 0
                rel target = </Root/Demo_2/Subject_2>

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Subject_2_Collision_Wall_1"
    {
        reorder nameChildren = ["Track", "Track2"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 0.5
                uniform token info:id = "02F83335-06A8-4A0E-B52A-B0384C9C32AA"
                float revolutions = 0.5
                token spinDirection = "clockwise"
                double startTime = 0
                rel target = </Root/Demo_2/Subject_2>

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }
}

