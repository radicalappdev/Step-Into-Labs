#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["OccMaterial", "SkyDome", "Timeline", "SubjectRight", "Subject"]
    def RealityKitTimeline "Timeline"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 2.0086999784853696
                uniform token info:id = "926E9FAE-FDD9-4CA8-8EFA-83932CE2B086"
                float3 position = (0, 0, 0)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (1, 1, 1)
                double startTime = 0
                rel target = </Root/MyBox>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeInOut"
                }
            }
        }
    }

    def Sphere "Subject" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "OccMaterial"]
        rel material:binding = </Root/OccMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float3 xformOp:translate = (1, 1, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.1
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }

    def Material "OccMaterial"
    {
        token outputs:mtlx:surface.connect = </Root/OccMaterial/OcclusionSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "OcclusionSurface"
        {
            uniform token info:id = "ND_realitykit_occlusion_surfaceshader"
            token outputs:out
            float2 ui:nodegraph:node:pos = (-166.6914, 36.13672)
            int ui:nodegraph:node:stackingOrder = 6
        }
    }

    def "SkyDome" (
        active = true
        references = @SkyDome.usdz@
    )
    {
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Looks"
        {
            over "GridMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "GridMAT"
                {
                    color3f inputs:diffuseColor = (0.83137256, 0.73333335, 0.73333335) (
                        colorSpace = "srgb_displayp3"
                    )
                }
            }

            over "GroundMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "GroundMAT"
                {
                    color3f inputs:diffuseColor = (0.41960785, 0.003921569, 0.17254902) (
                        colorSpace = "srgb_texture"
                    )
                }
            }

            over "DomeMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "DomeMAT"
                {
                    color3f inputs:diffuseColor = (0.83137256, 0.73333335, 0.73333335) (
                        colorSpace = "srgb_displayp3"
                    )
                }
            }
        }
    }

    def Cylinder "Cylinder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.8
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float3 xformOp:translate = (1, 0.4, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "MaplePlywood" (
        active = true
        prepend references = @MaplePlywood.usdz@
    )
    {
    }

    def Cone "Cone" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 3.1415927)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/Cone/DefaultMaterial>
        double radius = 0.1
        quatf xformOp:orient = (-4.371139e-8, 0, 0, 1)
        float3 xformOp:scale = (1.6, 1.6, 1.6)
        float3 xformOp:translate = (1.0000023, 0.68517345, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Cone/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.41960785, 0.003921569, 0.17254902) (
                    colorSpace = "srgb_texture"
                )
                float inputs:metallic = 0.5
                float inputs:roughness = 0.5
                token outputs:surface
            }
        }
    }
}

