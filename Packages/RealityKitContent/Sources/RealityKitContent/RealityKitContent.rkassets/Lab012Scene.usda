#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["MaplePlywood", "GlassMat", "OccMaterial", "SkyDome", "Cylinder", "Cone", "Cube", "Subject", "SpinCube", "CubeController"]
    def Sphere "Subject" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["InputTarget", "Collider", "Subject_Occ", "GlassMat"]
        rel material:binding = </Root/GlassMat> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1, 1, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.1
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def Sphere "Subject_Occ" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["DefaultMaterial", "OccMaterial"]
            rel material:binding = </Root/OccMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.98, 0.98, 0.98)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RealityKitComponent "VFXEmitter"
        {
            uniform token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Normal"
                token birthLocation = "Surface"
                float3 emissionDirection = (0, 0, 0)
                double emissionDuration = 1
                double emissionDurationVariation = 0
                token emitterShape = "Sphere"
                double idleDuration = 0
                double idleDurationVariation = 0
                bool isLocal = 0
                bool isSpawningEnabled = 1
                bool loops = 1
                float particleSpeed = 0.06
                float particleSpeedVariation = 0.04
                float3 shapeSize = (0.05, 0.05, 0.05)
                bool spawnInheritParentColor = 1
                token spawnOccasion = "OnUpdate"
                float spawnSpreadFactor = 0
                float spawnSpreadFactorVariation = 0
                float spawnVelocityFactor = 1
                double warmupDuration = 1.5

                def RealityKitStruct "mainEmitter"
                {
                    float3 acceleration = (0, 0, 0)
                    token animationRepeatMode = "Looping"
                    token billboardMode = "Billboard"
                    float birthRate = 40
                    float birthRateVariation = 0
                    token blendMode = "Additive"
                    float colorEvolutionPower = 1
                    int64 columnCount = 4
                    float dampingFactor = 0.25
                    float4 endColorA = (0.00030352705, 0.11953841, 0.14702724, 1)
                    float4 endColorB = (0.14702724, 0.00030352705, 0.025186861, 1)
                    float frameRate = 30
                    float frameRateVariation = 0
                    int64 initialFrame = 0
                    int64 initialFrameVariation = 2
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 1
                    float noiseScale = 1
                    float noiseStrength = 0.1
                    token opacityOverLife = "GradualFadeInOut"
                    float particleAngle = 0
                    float particleAngleVariation = 0.5
                    float particleAngularVelocity = 0.25
                    float particleAngularVelocityVariation = 0.5
                    asset particleImage = @ParticleEmitterPresetTextures/twinkle.exr@
                    double particleLifeSpan = 1
                    double particleLifeSpanVariation = 0.2
                    float particleMass = 1
                    float particleMassVariation = 0.2
                    float particleSize = 0.05
                    float particleSizeVariation = 0.004
                    float3 radialGravityCenter = (1, 1, 0)
                    float radialGravityStrength = 0
                    int64 rowCount = 4
                    float sizeMultiplierAtEndOfLifespan = 0.35
                    float sizeMultiplierAtEndOfLifespanPower = 3
                    token sortOrder = "IncreasingDepth"
                    float spreadingAngle = 0
                    float4 startColorA = (0.00030352705, 0.025186861, 0.14702724, 1)
                    float4 startColorB = (0.00030352705, 0.11953841, 0.14702724, 1)
                    float stretchFactor = 0
                    bool useEndColor = 1
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                    float3 acceleration = (0, -0.04, 0)
                    token animationRepeatMode = "AutoReverse"
                    token billboardMode = "Billboard"
                    float birthRate = 25
                    float birthRateVariation = 0
                    token blendMode = "Additive"
                    float colorEvolutionPower = 0
                    int64 columnCount = 4
                    float dampingFactor = 3
                    float4 endColorA = (0, 0.98059916, 1, 1)
                    float4 endColorB = (1, 0.051991113, 1, 1)
                    float frameRate = 24
                    float frameRateVariation = 0
                    int64 initialFrame = 2
                    int64 initialFrameVariation = 4
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0.25
                    float noiseScale = 1
                    float noiseStrength = 0.1
                    token opacityOverLife = "GradualFadeInOut"
                    float particleAngle = 0.745
                    float particleAngleVariation = 0.25
                    float particleAngularVelocity = 0.25
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @ParticleEmitterPresetTextures/twinkle.exr@
                    double particleLifeSpan = 0.75
                    double particleLifeSpanVariation = 0.25
                    float particleMass = 1
                    float particleMassVariation = 2
                    float particleSize = 0.02
                    float particleSizeVariation = 0.004
                    float3 radialGravityCenter = (0, 0, 0)
                    float radialGravityStrength = 0
                    int64 rowCount = 4
                    float sizeMultiplierAtEndOfLifespan = 0
                    float sizeMultiplierAtEndOfLifespanPower = 1
                    token sortOrder = "IncreasingID"
                    float spreadingAngle = 0
                    float4 startColorA = (1, 0.051991113, 1, 0.04)
                    float4 startColorB = (0, 0.98059916, 1, 0.04)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 1
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }
            }
        }
    }

    def Material "OccMaterial"
    {
        token outputs:mtlx:surface.connect = </Root/OccMaterial/OcclusionSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "OcclusionSurface"
        {
            uniform token info:id = "ND_realitykit_occlusion_surfaceshader"
            token outputs:out
            float2 ui:nodegraph:node:pos = (-166.6914, 36.13672)
            int ui:nodegraph:node:stackingOrder = 6
        }
    }

    def Cylinder "Cylinder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.8
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float3 xformOp:translate = (1, 0.4, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "MaplePlywood" (
        active = true
        references = @MaplePlywood.usdz@
    )
    {
    }

    def Cone "Cone" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 3.1415927)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/GlassMat> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (-4.371139e-8, 0, 0, 1)
        float3 xformOp:scale = (1.6, 1.6, 1.6)
        float3 xformOp:translate = (1.0000023, 0.68517345, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/GlassMat> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float3 xformOp:translate = (-1, 1, -1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Cube_Occ" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/OccMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.98, 0.98, 0.98)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Cube/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Cube/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Cube/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Cube>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/CubeController>
                rel animationLibraryKeyOverrideKey = </Root/Cube/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def Material "GlassMat"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/GlassMat/DefaultSurfaceShader.outputs:surface>
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def Shader "DefaultSurfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 1
            color3f inputs:diffuseColor = (0.41960785, 0.003921569, 0.17254902) (
                colorSpace = "srgb_texture"
            )
            float inputs:metallic = 0.1
            float inputs:opacity = 1
            float inputs:roughness = 0
            token outputs:surface
        }
    }

    def Cylinder "Cylinder_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.8
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1, 0.40000567, -0.99999714)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cone "Cone_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 3.1415927)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/GlassMat> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (-4.3711374e-8, 0, 0, 1)
        float3 xformOp:scale = (1.6, 1.6, 1.6)
        float3 xformOp:translate = (-1, 0.6851791, -0.99999714)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RealityKitTimeline "SpinCube"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 12
                uniform token info:id = "626ADDD8-757C-465A-BE43-13DBA45BB19F"
                double startTime = 0
                rel target = </Root/Cube>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def RealityKitTimeline "CubeController"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 12
                uniform token info:id = "FB6A22AE-CEDE-4A83-9CD1-4CB3D3193AB4"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/SpinCube>
            }
        }
    }

    def "StepDome" (
        active = true
        references = @BuildingBlocks/StepDome.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

