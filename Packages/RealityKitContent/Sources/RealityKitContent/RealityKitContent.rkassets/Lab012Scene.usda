#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Floor", "GlossyBlackWoodPlank", "MaplePlywood", "MyBox", "Timeline", "Subject", "OccMaterial"]
    def Cube "Floor" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/GlossyBlackWoodPlank> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 0.05, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "GlossyBlackWoodPlank" (
        active = true
        references = @Materials/GlossyBlackWoodPlank.usdz@
    )
    {
        color3f inputs:Basecolor_Tint = (0.83137256, 0.73333335, 0.73333335) (
            colorSpace = "srgb_displayp3"
        )
        token outputs:mtlx:surface.connect = </Root/GlossyBlackWoodPlank/PreviewSurface.outputs:out>
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
    }

    def "MaplePlywood" (
        active = true
        references = @Materials/MaplePlywood.usdz@
    )
    {
        color3f inputs:Basecolor_Tint = (0.99215686, 0.98039216, 0.98039216) (
            colorSpace = "srgb_displayp3"
        )
        token outputs:mtlx:surface.connect = </Root/MaplePlywood/PreviewSurface.outputs:out>
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
    }

    def Xform "MyBox" (
        active = true
    )
    {
        reorder nameChildren = ["Roof", "Wall_0", "Wall_1", "Wall_2", "Wall_3"]
        float3 xformOp:translate = (0, 3, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Roof" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/GlossyBlackWoodPlank> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 2
            float2 ui:nodegraph:node:pos = (52.36331, 491.47977)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 0.05, 1)
            float3 xformOp:translate = (0, 2, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "Wall_0" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 1.5707964)
            }
        )
        {
            rel material:binding = </Root/MaplePlywood> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 2
            float2 ui:nodegraph:node:pos = (52.36331, 491.47977)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
            float3 xformOp:scale = (0.99999976, 0.049999986, 0.99999976)
            float3 xformOp:translate = (1, 1.0000125, 4.2282045e-7)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "Wall_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 1.5707964)
            }
        )
        {
            rel material:binding = </Root/MaplePlywood> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 2
            float2 ui:nodegraph:node:pos = (72.36331, 511.47977)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
            float3 xformOp:scale = (0.99999964, 0.04999998, 0.99999964)
            float3 xformOp:translate = (-1, 1.0000125, 4.2282045e-7)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "Wall_2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707964, 0, 1.5707964)
            }
        )
        {
            rel material:binding = </Root/MaplePlywood> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 2
            float2 ui:nodegraph:node:pos = (92.36331, 531.47974)
            int ui:nodegraph:node:stackingOrder = 4
            quatf xformOp:orient = (0.5, 0.49999994, 0.5, 0.5)
            float3 xformOp:scale = (0.9999997, 0.049999982, 0.9999997)
            float3 xformOp:translate = (0, 1, -1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (2, 2, 2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }
        }

        def Cube "Wall_3" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707964, 0, 1.5707964)
            }
        )
        {
            rel material:binding = </Root/MaplePlywood> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 2
            float2 ui:nodegraph:node:pos = (112.36331, 551.47974)
            int ui:nodegraph:node:stackingOrder = 5
            quatf xformOp:orient = (0.5, 0.49999994, 0.5, 0.5)
            float3 xformOp:scale = (0.9999997, 0.049999982, 0.9999997)
            float3 xformOp:translate = (-5.9604645e-8, 1.0000175, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/MyBox/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/MyBox/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/MyBox/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/MyBox>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/Timeline>
                rel animationLibraryKeyOverrideKey = </Root/MyBox/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def RealityKitTimeline "Timeline"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 2.0086999784853696
                uniform token info:id = "926E9FAE-FDD9-4CA8-8EFA-83932CE2B086"
                float3 position = (0, 0, 0)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (1, 1, 1)
                double startTime = 0
                rel target = </Root/MyBox>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeInOut"
                }
            }
        }
    }

    def "Subject" (
        active = true
        references = @MagnifyingGlass.usdz@
    )
    {
        reorder nameChildren = ["geom", "SubjectGlass"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "geom"
        {
            over "realistic"
            {
                over "materials"
                {
                    over "magnifying_glass_realistic_01_matsg"
                    {
                        string inputs:file20:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (438.25, 709.5)
                                }
                            }
                        )
                        string inputs:file21:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (657.25, 709.5)
                                }
                            }
                        )
                        string inputs:file22:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (877.75, 709.5)
                                }
                            }
                        )
                        string inputs:file23:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (1098.75, 709.5)
                                }
                            }
                        )
                        token outputs:realitykit:vertex
                        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1432, 281)

                        over "file23_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (892.25, 261)
                        }

                        over "file20_mtlx_offset"
                        {
                            float2 ui:nodegraph:node:pos = (892.25, 82.5)
                        }

                        over "Lookup_st"
                        {
                            float2 ui:nodegraph:node:pos = (91, 313)
                        }

                        over "file20_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (350, 100.5)
                        }

                        over "file20_mtlx_scale"
                        {
                            float2 ui:nodegraph:node:pos = (622.75, 100.5)
                        }

                        over "file22_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (350, 521.5)
                        }

                        over "magnifying_glass_realistic_glass_mat_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (1162, 281)
                        }

                        over "file21_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (622.75, 431.5)
                        }
                    }

                    over "magnifying_glass_realistic_01_mat_sg"
                    {
                        string inputs:file6:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (338.5, 1014.5)
                                }
                            }
                        )
                        string inputs:file7:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (550, 1014.5)
                                }
                            }
                        )
                        string inputs:file8:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (763.5, 1014.5)
                                }
                            }
                        )
                        string inputs:file9:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (976.5, 1014.5)
                                }
                            }
                        )
                        string inputs:file15:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (1195.5, 1014.5)
                                }
                            }
                        )
                        token outputs:realitykit:vertex
                        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1432, 465.5)

                        over "magnifying_glass_realistic_mat_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (1162, 465.5)
                        }

                        over "file7_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (892.25, 315)
                        }

                        over "file9_mtlx_scale"
                        {
                            float2 ui:nodegraph:node:pos = (622.75, 100.5)
                        }

                        over "file9_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (350, 100.5)
                        }

                        over "file6_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (350, 656)
                        }

                        over "file8_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (622.75, 826.5)
                        }

                        over "Lookup_st"
                        {
                            float2 ui:nodegraph:node:pos = (91, 465.5)
                        }

                        over "file9_mtlx_offset"
                        {
                            float2 ui:nodegraph:node:pos = (892.25, 100.5)
                        }

                        over "file15_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (622.75, 485.5)
                        }
                    }
                }
            }
        }

        def Cylinder "SubjectGlass" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707964, 0, 0)
            }
        )
        {
            reorder nameChildren = ["DefaultMaterial", "OccMaterial"]
            uniform token axis = "Y"
            double height = 0.017
            rel material:binding = </Root/Subject/SubjectGlass/OccMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.048
            quatf xformOp:orient = (0.70710677, 0.7071067, 0, 0)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
            float3 xformOp:translate = (8.032657e-9, 0.179, 8.96398e-9)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "OccMaterial"
            {
                token outputs:mtlx:surface.connect = </Root/Subject/SubjectGlass/OccMaterial/OcclusionSurface.outputs:out>
                token outputs:realitykit:vertex
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

                def Shader "OcclusionSurface"
                {
                    uniform token info:id = "ND_realitykit_occlusion_surfaceshader"
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-166.6914, 36.13672)
                    int ui:nodegraph:node:stackingOrder = 6
                }
            }
        }
    }
}

